#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
//var config = require('config');
var Message = require('../models/message').Message;
var UserFile = require('../models/userFile').UserFile;
var Connection = require('../models/connection').Connection;
var crypto = require("crypto");
var HttpError = require('../error/index').HttpError;
var Channel = require('../models/channel').Channel;
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || config.get('port'));
var port = normalizePort(process.env.PORT || 3001);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/*
io.sockets.on('connection', function(socket){
    socket.emit('news', {hello: "world"});
    socket.on('my other event', function (data) {
      console.log(data);
    })
});
*/
var io = require('socket.io')(server);

server.listen(port, () => {
  console.log('listening')
});
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function(socket){

    socket.join('some room');
    Channel.find((err, channels) => {
        if (err) {
            return next(err);
        }
        channels.forEach((channel) => {
            socket.join(channel._id);
        });
        //console.log(socket);
        //io.to('some room').emit('chat message', channels);
    });

    socket.broadcast.emit('user connected');
    console.log('a user connected with id: ' + socket.id);
    socket.on('storeUserData', (info) => {
        Connection.create({username: info.username, socketId: socket.id}, (err) => {
            if (err) return err;
        });

        //let id = crypto.randomBytes(20).toString('hex');
        //io.emit('broadcast', {_id: id, username: 'system', text: 'A user '+ info.username +' connected'});
    });


    socket.on('disconnect', () => {
        Connection.findOne({socketId: socket.id}, (err, conn) => {
            if (err) {
                return next(err);
            }
            let id = crypto.randomBytes(20).toString('hex');
            console.log('disconnected');
            //io.emit('chat message', {_id: id, username: 'system', text: 'A user ' + conn.username + ' disconnected'});
            //conn.remove();
        });

        console.log('user disconnected with id ' + socket.id);
    });

    socket.on('chat message', function(msg){
        //console.log(msg);
        let message = new Message({username: msg.username, userId: msg.userId, text: msg.text, channelId: msg.channelId, attachments: msg.attachments, created: Date.now()});
        message.save(function (err, message) {
            Message.findOne(message).populate('attachments').exec(function (err, message) {
                if (err) console.log(err);
                io.emit('chat message', message);
            });
        });
        /*Message.findOne(message, function (err, message) {
            console.log('message');
            console.log(message);
        });*/
        /*Message.find({_id: message._id}).populate('attachments').exec(function (err, message) {
            if (err) console.log(err);
            console.log(message);
        });*/
        //console.log('message: ' + message);


    });

    let files = {},
        struct = {
            name: null,
            type: null,
            size: 0,
            data: [],
            slice: 0,
        };

    socket.on('slice upload', (data) => {
        if (!files[data.fakeName]) {
            files[data.fakeName] = Object.assign({}, struct, data);
            files[data.fakeName].data = [];
        }

        let file = files[data.fakeName];

            //convert the ArrayBuffer to Buffer
        data.data = new Buffer.from(new Uint8Array(data.data));
        //save the data
        if (!file.data[data.slice]) {
            file.data.push(data.data);
            file.slice++;

            if (file.slice * data.chunkSize >= file.size) {
                let fileBuffer = Buffer.concat(file.data);

                let dir = './public/uploads/' + data.userId;
                if (!fs.existsSync(dir)){
                    fs.mkdirSync(dir);
                }
                fs.open(dir + '/' + data.fakeName, 'w', function (err, fd) {
                    fs.write(fd, fileBuffer, (err) => {
                        delete files[data.fakeName];
                        if (err) return socket.emit('upload error');
                        let userFile = new UserFile({name: data.fakeName, realName: data.name, type: data.type, userId: data.userId, created: Date.now()});
                        userFile.save((err) => {
                            //if(err) return next(err);
                            if(err) console.log(err);
                            socket.emit('end upload', {file: userFile._id});
                        });
                    });
                });
            } else {
                socket.emit('request slice upload', {
                    currentSlice: file.slice,
                    fileName: data.name
                });
            }
        }
    });

    /*socket.on('file upload', function (data) {
        console.log("File data");
        console.log(data);
    })*/

    //io.emit('chat message', {username: 'Mothefucker', userId: 1111, text: 'Hi mutafickers'});

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
