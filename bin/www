#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
//var config = require('config');
var Message = require('../models/message').Message;
var Connection = require('../models/connection').Connection;
var crypto = require("crypto");
var HttpError = require('../error/index').HttpError;
var Channel = require('../models/channel').Channel;

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || config.get('port'));
var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/*
io.sockets.on('connection', function(socket){
    socket.emit('news', {hello: "world"});
    socket.on('my other event', function (data) {
      console.log(data);
    })
});
*/
var io = require('socket.io')(server);

server.listen(port, () => {
  console.log('listening')
});
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function(socket){

    socket.join('some room');
    Channel.find((err, channels) => {
        if (err) {
            return next(err);
        }
        channels.forEach((channel) => {
            socket.join(channel._id);
        });
        //console.log(socket);
        //io.to('some room').emit('chat message', channels);
    });

    socket.broadcast.emit('user connected');
    console.log('a user connected with id: ' + socket.id);
    socket.on('storeUserData', (info) => {
        Connection.create({username: info.username, socketId: socket.id}, (err) => {
            if (err) return err;
        });

        //let id = crypto.randomBytes(20).toString('hex');
        //io.emit('broadcast', {_id: id, username: 'system', text: 'A user '+ info.username +' connected'});
    });


    socket.on('disconnect', () => {
        Connection.findOne({socketId: socket.id}, (err, conn) => {
            if (err) {
                return next(err);
            }
            let id = crypto.randomBytes(20).toString('hex');
            io.emit('chat message', {_id: id, username: 'system', text: 'A user ' + conn.username + ' disconnected'});
            conn.remove();
        });

        console.log('user disconnected with id ' + socket.id);
    });

    socket.on('chat message', function(msg){
       // console.log(socket);
        let message = new Message({username: msg.username, text: msg.text, channelId: msg.channelId});
        message.save();
        console.log('message: ' + message);
        io.emit('chat message', message);
    });

});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
